import Head from 'next/head';
import {
  Box,
  Button,
  Paper,
  Typography,
  Container,
  Grid,
  FormControlLabel,
  RadioGroup,
  Radio,
} from '@mui/material';
import { BASE_URL, GOOGLE_CLIENT_ID, LOGIN_IMG } from '../libs/config';
import GoogleIcon from '@mui/icons-material/Google';
import GoogleLogin from 'react-google-login';
import axios from 'axios';
import { useState } from 'react';
import SelectionModel from '../components/Model/SelectionModel';
import Router from 'next/router';

const USER = 'USER';
const ADMIN = 'ADMIN';
const MENTOR = 'MENTOR';
const MENTEE = 'MENTEE';
const ADMIN_USER = 'ADMIN_USER';

const onLoginFailure = (res) => {
  console.log('Login Failed', res);
};

export default function Home() {
  const [role, setRole] = useState(-1);
  const [isShowModel, setIsShowModel] = useState(false);

  const onLoginSuccess = async (response) => {
    try {
      const req = await axios.post(
        `${BASE_URL}/login`,
        { email: response.profileObj.email },
        {
          headers: {
            Authorization: response.accessToken,
          },
        }
      );
      sessionStorage.setItem('token', req.data.token);
      sessionStorage.setItem('email', response.profileObj.email);

      const userRole = req.data.role;
      sessionStorage.setItem('role', req.data.role);

      setRole(userRole);

      if (userRole === USER) {
        setIsShowModel(true);
      } else if (userRole === ADMIN) {
        Router.push('/adminDashboard');
      } else if (userRole === MENTOR || userRole === MENTEE) {
        Router.push('/dashboard');
      }
    } catch (e) {
      console.error(e);
    }
  };

  return (
    <>
      <Head>
        <title>Mentor Pro Login</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Grid container component="main" sx={{ height: '100vh' }}>
        <Grid
          item
          xs={false}
          sm={4}
          md={6}
          sx={{
            position: 'relative',
            overflow: 'hidden',
          }}
        >
          <Typography
            component="img"
            src={LOGIN_IMG}
            sx={{
              position: 'absolute',
              top: '50%',
              left: '50%',
              width: '600px',
              transform: 'translate(-50%, -50%)',
            }}
          />
        </Grid>

        <Grid
          item
          xs={12}
          sm={8}
          md={6}
          component={Paper}
          elevation={6}
          container
          justifyContent="center"
        >
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'start',
              justifyContent: 'center',
            }}
          >
            <Container>
              {role === -1 && (
                <>
                  <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
                    Log in to Mentor Pro
                  </Typography>

                  <Typography component="p" sx={{ mt: '10px' }}>
                    In learning you will teach, and in teaching you will learn
                  </Typography>

                  <br />

                  <GoogleLogin
                    clientId={GOOGLE_CLIENT_ID}
                    render={(renderprops) => (
                      <Button
                        variant="contained"
                        startIcon={<GoogleIcon />}
                        sx={{ mt: '10px' }}
                        onClick={renderprops.onClick}
                      >
                        Log in with Google
                      </Button>
                    )}
                    onSuccess={onLoginSuccess}
                    onFailure={onLoginFailure}
                    cookiePolicy={'single_host_origin'}
                    className=" mx-7 "
                  />
                </>
              )}

              {role === ADMIN_USER && (
                <>
                  <Typography
                    variant="h5"
                    mb="15px"
                    sx={{ fontWeight: 'bold' }}
                  >
                    Select Your Role
                  </Typography>
                  <RadioGroup
                    onChange={(e) => {
                      const value = e.target.value;
                      if (value === ADMIN) Router.push('/adminDashboard');
                      else setIsShowModel(true);
                    }}
                  >
                    <FormControlLabel
                      value={ADMIN}
                      control={<Radio />}
                      label="Admin"
                    />
                    <FormControlLabel
                      value={USER}
                      control={<Radio />}
                      label="User"
                    />
                  </RadioGroup>
                </>
              )}

              <SelectionModel
                isShowModel={isShowModel}
                setIsShowModel={setIsShowModel}
                role={role}
              />
            </Container>
          </Box>
        </Grid>
      </Grid>
    </>
  );
}
